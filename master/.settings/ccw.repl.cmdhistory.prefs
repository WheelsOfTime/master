cmdhistory=["(use 'master.repl)" "(start-server)" "(str \\"aa\\" \\"bb\\" \\"ccc\\")" "(clojure.string/replace \\"mile voli disko\\" \\" \\" \\"+\\")" "(trim \\" asa \\")" "(clojure.string/trim \\"  mile voli disko  \\")" "\\"  mile voli disko  \\"" "(use 'master.routes.movie)" "(get-full-url \\"Bad Boys\\")" "(use 'master.routes.movie)" "(parse (httpCallBody (get-full-url \\"Bad Boys\\")))" "(def c (parse (httpCallBody (get-full-url \\"Bad Boys\\"))))" "c" "(->> c\\r\\n     \:content\\r\\n     first\\r\\n     \:attrs\\r\\n     \:genre\\r\\n     )" "(load-image-resource \\"mikera/image/samples/Ant.png\\")" "(use 'master.routes.movie)" "(use 'master.repl)" "(start-server)" "(use 'master.repl)" "(use 'master.routes.movie)" "(use 'master.repl)" "(start-server)" "(use 'master.repl)" "(start-server)" "(use 'master.repl)" "(start-server)" "(use 'master.routes.home)" "(home)" "(home nil nil)" "(use 'master.repl)" "(start-server)" "(stop-server)" "(start-server)" "(use 'master.repl)" "(start-server)" "(def a nil)" "(use 'master.repl)" "(start-server)" "parse \\r\\n        (http-call \\r\\n          (get-full-url name)))" "(use 'master.routes.movie)" "parse \\r\\n        (http-call \\r\\n          (get-full-url name)))" "(parse \\r\\n        (http-call \\r\\n          (get-full-url name)))" "(parse \\r\\n        (http-call \\r\\n          (get-full-url \\"Ed\\")))" "(use 'master.routes.comments)" "(use 'master.models.db)" "(create-comment-table)" "(use 'master.models.db)" "read-comments" "(read-comments \\"Ed\\")" "(use 'master.repl)" "(start-server)" "(use 'master.repl)" "(start-server)" "(use 'master.routes.movie)" "(set-data-on-page \\r\\n      (parse \\r\\n        (http-call \\r\\n          (get-full-url \\"aaaaa\\"))))" "(parse \\r\\n        (http-call \\r\\n          (get-full-url name)))" "(parse (http-call \\r\\n          (get-full-url \\"aaaaa\\")))" "(def a (parse (http-call \\r\\n          (get-full-url \\"aaaaa\\"))))" "a" "(->> a\\r\\n            \:content\\r\\n            first\\r\\n            \:attrs\\r\\n            \:content\\r\\n            )" "(->> a\\r\\n            \:content\\r\\n            \\r\\n            )" "(->> a\\r\\n            \:content\\r\\n            \:content\\r\\n            )" "(->> a\\r\\n            \:content\\n            first\\r\\n            \:content\\r\\n            )" "(use 'master.repl)" "(start-server)" "(use 'master.routes.movie)" "(movie-page)" "(movie-page \\"Bad Boys\\")" "(use 'master.routes.movie)" "(def a (parse (http-call \\r\\n          (get-full-url \\"aaaaa\\"))))" "a" "(->> data\\r\\n            \:content\\r\\n            first\\r\\n            \:attrs\\r\\n            \:title\\r\\n            )" "(->> a\\r\\n            \:content\\r\\n            first\\r\\n            \:attrs\\r\\n            \:title\\r\\n            )" "(if (\= (->> a\\r\\n               \:content\\r\\n               first\\r\\n               \:attrs\\r\\n               \:title\\r\\n               ) nil) (\\"null\\") (\\"nije\\"))" "(if (\= (->> a\\r\\n               \:content\\r\\n               first\\r\\n               \:attrs\\r\\n               \:title\\r\\n               ) \\"nil\\") (\\"null\\") (\\"nije\\"))" "(if (\= (->> a\\r\\n               \:content\\r\\n               first\\r\\n               \:attrs\\r\\n               \:title\\r\\n               ) \\"nil\\") \\"null\\" \\"nije\\")" "(if (\= (->> a\\r\\n               \:content\\r\\n               first\\r\\n               \:attrs\\r\\n               \:title\\r\\n               ) nil) \\"null\\" \\"nije\\")" "(use 'master.models.db)" "(create-comment-table)" "(use 'master.models.db)" "(create-comment-table)" "(use 'master.repl)" "(start-server)" "(use 'master.models.db)" "(read-comments)" "(read-comments \\"Bad Boys\\")" "(def comm [\:text \\"1\\" \:timestamp \\"2\\" \:badcount \\"3\\" \:goodcount \\"4\\" \:spam \\"5\\"])" "comm" "(use 'master.repl)" "(start-server)" "(use 'master.routes.comments)" "(make-comment 1 \\"22\\" 12313 1 2 1)" "(make-comment 1 \\"22\\" \\"as\\" 12313 1 2 1)" "(use 'master.repl)" "(start-server)" "(use 'master.repl)" "(start-server)" "(use 'master.repl)" "(start-server)" "(use 'master.repl" "(use 'master.repl)" "(start-server" "(start-server)" "(use 'master.models.db)" "(update-comment (map 1 \\"asda\\" \\"asdasd\\" 1231231 1 2 0) 1)" "(update-comment (map 1 \\"asda\\" \\"asdasd\\" (new java.util.Date) 1 2 0) 1)" "(update-comment (map 25 \\"werwerwerwe\\" \\"werwerwerwe\\" 1443230954330 1 2 0) 1)" "(update-comment (map 25 \\"werwerwerwe\\" \\"werwerwerwe\\" (new java.util.Date) 1 2 0) 1)" "(use 'master.models.db)" "(read-comments \\"Bad Boys\\")" "(update-comment {\:spam 0,\\r\\n  \:goodcount 1,\\r\\n  \:badcount 1,\\r\\n  \:title \\"Bad Boys\\",\\r\\n  \:name \\"Vule\\",\\r\\n  \:text \\"Nije lose\\",\\r\\n  \:timestamp 1443205816575,\\r\\n  \:id 2} 2)" "(read-comments \\"Bad Boys\\")" "(update-comment {\:spam 0,\\r\\n  \:goodcount 1,\\r\\n  \:badcount 1,\\r\\n  \:title \\"Bad Boys\\",\\r\\n  \:name \\"Vule\\",\\r\\n  \:text \\"Nije lose\\",\\r\\n  \:timestamp 1443205816575,\\r\\n  \:id 2})" "(update-comment {\:spam 0,\\r\\n  \:goodcount 1,\\r\\n  \:badcount 1,\\r\\n  \:title \\"Bad Boys\\",\\r\\n  \:name \\"Vule\\",\\r\\n  \:text \\"Nije lose\\",\\r\\n  \:timestamp 1443205816575,\\r\\n  \:id 2} 2)" "(use 'mas)" "(use 'master.routes.comments)" "()update-commentNo" "(use 'master.repl)" "(start-server)" "(use 'master.repl)" "(start-server)" "(use 'master.routes.comments)" "(update-commentNo 1 \\"2\\" \\"3\\" 4 1 1 1)" "(update-commentNo 1 \\"2\\" \\"3\\" 4 1 1 1 \\"Bad Boys\\")" "(stop-server)" "(use 'master.repl)" "(stop-server)" "(start-server-server)" "(start-server)" "(use 'master.models.db)" "(use 'master.routes.comments)" "(use 'master.models.db)" "(create-comment-table)" "(use 'master.repl)" "(start-server)" "(def a {\\"b\\" \\"bbbb\\", \\"c\\" \\"cccc\\"})" "a" "a{1}" "a[1]" "\:b a" "(\:b a)" "(get {\:a 1 \:b 2} \:a)" "(like \\"Like\\" 1\\n      )" "(use 'master.routes.comments)" "(like \\"Like\\"  8)" "(like \\"Likae\\"  8)" "(dislike \\"Likae\\"  8)" "(use 'master.routes.comments)" "(dislike \\"Likae\\"  8)" "(dislike \\"Spam\\"  8)" "(use 'master.routes.comments)" "(on-clik-spam \\"Like\\" (like \\"Like\\" 0) (dislike \\"Like\\" 0))" "(on-clik-spam \\"Spam\\" (like \\"Spam\\" 0) (dislike \\"Spam\\" 0))" "(on-clik-spam (like \\"Spam\\" 0) (dislike \\"Spam\\" 0))" "(if (< 1 2) \\"manje\\" \\"vece\\")" "(use 'master.routes.comments)" "(on-clik-spam (like \\"Like \\" 9) (dislike \\"Like\\" 1))" "(on-clik-spam (like \\"Spam \\" 9) (dislike \\"Spam\\" 1))" "(on-clik-spam (like \\"Like \\" 9) (dislike \\"Like\\" 9))" "(on-clik-spam (like \\"Like \\" 9) (dislike \\"Like\\" 11))" "(use 'guestbook.routes.spam-2)" "(def cl (make-classifier1 \:spam \:like))" "cl" "train\!" "(train\! cl \\"gentelman\\" \:bad)" "(train\! cl \\"gentelman\\" \:spam)" "cl" "(def cl (train\! cl \\"gentelman\\" \:spam))" "cl" "(def cl (train\! cl \\"gentelman\\" \:spam))" "cl" "(def cl (train\! cl \\"gentelman\\" \:like))" "(p-of-cat-given-feature-graham ct \\"gentelman\\")" "(p-of-cat-given-feature-graham cl \\"gentelman\\")" "cl" "(use 'guestbook.routes.spam)" "(def cl (make-classifier \:bad \:good))" "(def cl (learn\! cl \\"gen\\" \:bad))" "cl" "(def cl (learn\! cl \\"gen\\" \:bad))" "cl" "(def cl (learn\! cl \\"gen\\" \:bad))" "cl" "(def cl (learn\! cl \\"gen\\" \:good))" "cl" "(p-of-class-given-token-graham cl \\"gen\\")" "(def cl (learn\! cl \\"last\\" \:good))" "(p-of-class-given-token-graham cl \\"gen\\")" "cl" "(p-of-class-given-token cl \\"gen\\")" "(def nd (make-classifier \:good \:bad))" "(def nd (learn\! nd \\"free\\" \:bad))" "nd" "(p-of-class-given-token nd \\"gen\\")" "(p-of-class-given-token nd \\"free\\")" "(def nd (learn\! nd \\"free\\" \:good))" "nd" "(p-of-class-given-token nd \\"free\\")" "(->> cl\\r\\n      \:categories\\r\\n      \:bad\\r\\n      \:features\\r\\n       )" "(->> nd\\r\\n      \:observations\\r\\n      \:bad\\r\\n      \:token\\r\\n       )" "(->> nd\\n  \:classes\\r\\n      )" "(->> nd\\n  \:classes\\n  \:good\\r\\n      )" "(->> nd\\n  \:classes\\n  \:good\\n  \:tokens\\r\\n      )" "(get (->> nd\\n       \:classes\\n       \:good\\n       \:tokens\\r\\n      ) \\"free\\")" "nd" "(p-of-class nd \\"free\\")" "(p-of-token-given-class nd \:bad \\"free\\")" "(p-of-class-given-token nd \\"free\\")" "use" "(use 'guestbook.routes.spam3)" "(def cl (make-classifier3 \:bad \:good))" "(def cl (nlearn\! cl \\"what\\" \:good))" "cl" "(def cl (nlearn\! cl \\"what\\" \:bad))" "(np-of-class-given-token cl \\"what\\")" "(def cl (nlearn\! cl \\"offer\\" \:bad))" "(np-of-class-given-token cl \\"what\\")" "(def cl (nlearn\! cl \\"offer\\" \:bad))" "cl" "(def cl (nlearn\! cl \\"offer\\" \:bad))" "(np-of-class-given-token cl \\"what\\")" "(np-of-class-given-token cl \\"offer\\")" "(def cl (nlearn\! cl \\"offer\\" \:good))" "(np-of-class-given-token cl \\"offer\\")" "(def cl (nlearn\! cl \\"lasta\\" \:good))" "(np-of-class-given-token cl \\"offer\\")" "(use 'master.spam-helper)" "(use 'master.spam\=_helper)" "(use 'master.spam_helper)" "(def cl (make-classifier \:bad \:good\\n                         ))" "cl" "(def cl (ntrain\! \\"fox\\" \:bad))" "(def cl (ntrain\! cl \\"fox\\" \:bad))" "(def cl (ntrain\! cl \\"fox\\" \:good))" "cl" "(np-of-category-given-feature cl \\"fox\\")" "(def cl (ntrain\! cl \\"learn\\" \:good))" "(def cl (ntrain\! cl \\"learn\\" \:bad))" "(np-of-category-given-feature cl \\"learn\\")" "\\ncl" "\\n(assoc cl \:features \\"Sue\\")" "cl" "(assoc-in cl [1 \:age] 44)" "(defn- nbase-train [st feature category num]\\r\\n  (merge  (update-in (update-in st [\:categories category \:features]\\r\\n                                (fn [m c] (assoc m feature (inc c)))\\r\\n                                (get-in st [\:categories category \:features feature] 0))\\r\\n                     [\:categories category]\\r\\n                     (fn [m c] (assoc m \:counts (inc c)))\\r\\n                     (get-in st [\:categories category \:counts]))\\r\\n          {\:counts num}))" "cl" "(nbase-train cl \\"learn\\" 5)" "nbase-train" "(nbase-train cl \\"learn\\" 5)" "(nbase-train cl \\"learn\\"\\n             )" "(nbase-train cl \:bad \\"learn\\" 5\\n             )" "(nbase-train cl  \\"learn\\"  \:bad 5\\n             )" "(defn- opa [st feature category num]\\r\\n  (merge  (update-in (update-in st [\:categories category \:features]\\r\\n                                (fn [m c] (assoc m feature (inc c)))\\r\\n                                (get-in st [\:categories category \:features feature] 0))\\r\\n                     [\:categories category]\\r\\n                     (fn [m c] (assoc m \:counts num))\\r\\n                     (get-in st [\:categories category \:counts]))\\r\\n          {\:counts (inc (get st \:counts))}))" "(opa cl  \\"learn\\"  \:bad 5)" "(defn- opa [st feature category num1 num2 num3]\\r\\n  (merge  (update-in (update-in st [\:categories category \:features]\\r\\n                                (fn [m c] (assoc m feature num1))\\r\\n                                (get-in st [\:categories category \:features feature] 0))\\r\\n                     [\:categories category]\\r\\n                     (fn [m c] (assoc m \:counts num2))\\r\\n                     (get-in st [\:categories category \:counts]))\\r\\n          {\:counts num3}))" "(opa cl  \\"learn\\"  \:bad 5 6 7)" "(defn- newopa [st feature category num]\\r\\n  (merge  (update-in (update-in st [\:categories category \:features]\\r\\n                                (fn [m c] (assoc m feature (+ c num)))\\r\\n                                (get-in st [\:categories category \:features feature] 0))\\r\\n                     [\:categories category]\\r\\n                     (fn [m c] (assoc m \:counts (+ c num)))\\r\\n                     (get-in st [\:categories category \:counts]))\\r\\n          {\:counts (+ (get st \:counts) num)}))" "cl" "(newopa cl  \\"learn\\"  \:bad 5)" "(use 'master.spam_helper)" "(def cl (make-classifier \:bad \:good))" "cl" "(re-seq \#\\"\\\\w+\\" \\"This is a test. Only a test\!\\")" "(def words (re-seq \#\\"\\\\w+\\" \\"This is a test. Only a test\!\\"))" "words" "(for words (str x \\"aa\\"))" "(doseq [[idx val] (indexed [\\"Hello\\" \\"World\\" \\"Test\\" \\"This\\"])]\\r\\n  (setCell 0 idx val))" "(doseq [[idx val] (clojure.contrib.seq-utils/indexed [\\"Hello\\" \\"World\\" \\"Test\\" \\"This\\"])]\\r\\n  (setCell 0 idx val))" "(map (str words \\"a\\"))" "(map (str words \\"a\\") words)" "(defn a [s]\\n  (str s \\"-dodato\\"))" "(a \\"dsd\\")" "(map a words)" "(clojure.string/lower-case \\"MiXeD cAsE\\")" "(def words (re-seq \#\\"\\\\w+\\" \\"This is is is is a test. Only a test\!\\"))" "words" "(distinct words)" "cl" "(def cl (make-classifier \:bad \:good))" "cl" "(def cl (ntrain\! \\"money\\" \:bad))" "(def cl (ntrain\! cl \\"money\\" \:bad))" "(def cl (ntrain\! cl \\"money\\" \:good))" "cl" "(np-of-feature-given-feature cl \\"money\\")" "(np-of-category-given-feature cl \\"money\\")" "\:bad (np-of-category-given-feature cl \\"money\\")" "(\:bad (np-of-category-given-feature cl \\"money\\"))" "cl" "(np-of-category-given-feature cl \\"money\\")" "(def cl (ntrain\! cl \\"dog\\" \:good))" "(def cl (ntrain\! cl \\"dog\\" \:bad))" "(np-of-category-given-feature cl \\"dog\\")" "(np-of-category-given-feature cl \\"money\\")" "(re-seq \#\\"\\\\w+\\" \\"This is a test. Only a test\!\\")" "(distinct \\r\\n     (re-seq \#\\"\\\\w+\\" \\r\\n             (clojure.string/lower-case \\"This is a test. Only a test\!\\")))" "(distinct \\r\\n     (re-seq \#\\"\\\\w+\\" \\r\\n             (clojure.string/lower-case \\"This is a test. Only onlY  a test\!\\")))" "(count \\"lala\\")" "(if (> (count \\"lalala\\") 2) \\"Da\\" \\"ne\\")" "(if (> (count \\"la\\") 2) \\"Da\\" \\"ne\\")" "(fill-classifier \\"laste\\" \:good)" "(use 'master.routes.comments)" "(fill-classifier \\"laste\\" \:good)" "classifier" "(def words (re-seq \#\\"\\\\w+\\" \\"This is a test. Only a test\!\\"))\\r\\n\\t map fn niz" "(def words (re-seq \#\\"\\\\w+\\" \\"This is a test. Only a test\!\\"))" "words" "(defn dodaj [s] (str s \\"-dod\\"))" "(map dodaj words)" "(defn dodaj [s aaa] (str s \\"-dod\\" aaa))" "(map (dodaj \\"mile\\") words)" "(map dodaj words)" "(map (dodaj x \\"-op\\") words)" "(use 'master.routes.comments)" "(insert-into \\"ovo je rec koja se ubacuje\\" 1)" "classifier" "(insert-into \\"kupite ovaj proizvod povoljno\\" 0)" "classifier" "(use 'master.models.db)" "(create-words-table)" "(insert-word \\"sir\\" 4 1)" "(insert-word \\"sir\\" 4 0 1)" "(read-word \\"sir\\")" "(insert-word \\"madam\\" 4 1 1)" "(read-word \\"madam\\")" "(insert-word \\"lady\\" 4 0 1)" "(read-word \\"lady\\")" "(use 'master.routes.comments)" "classifier" "(insert-into \\"ovo je samo proba\\" 1)" "classifier" "(insert-into \\"ovo je samo proba da li ovo radi\\" 1)" "(insert-into \\"ovo je samo proba da li ovo radi\\" 0)" "classifier" "(->> cl\\r\\n      \:categories\\r\\n      \:bad\\r\\n      \:features\\r\\n       )" "(->> classifier\\r\\n      \:categories\\r\\n      \:bad\\r\\n      \:features\\r\\n       )" "(get (->> classifier\\r\\n      \:categories\\r\\n      \:bad\\r\\n      \:features\\r\\n       ) \\"samo\\")" "(->> classifier\\r\\n      \:categories\\r\\n      \:bad\\r\\n      \:features\\r\\n       )" "(get (->> classifier\\r\\n      \:categories\\r\\n      \:bad\\r\\n      \:features\\r\\n       ) \\"samo\\")" "(use 'master.routes.comments)" "(words-do-all \\"Da li je ovo dobra recenica\!\\" 1)" "(get-probability-and-db \\"ovo kao radi\\")" "classifier" "(words-do-all-for-classifier \\"Kupite kod nas mi smo najbolji\\" 1)" "classifier" "(insert-into-classifier \\"opet neki tekst\\" 1)" "classifier" "(defn alls \\n  (str \\"aa\\" \\"bb\\")\\n  (+ 1 2))" "(defn alls [] \\n  (str \\"aa\\" \\"bb\\")\\n  (+ 1 2))" "alls" "(use 'master.routes.comments)" "(words-do-all \\"Aj bre da ovo proradi\\" 0)" "classifier" "(use 'master.models.db)" "(read-word)" "(use 'master.models.db)" "(delete-all-words)" "(use 'master.models.db)" "(read-word)" "(delete-all-words \\"proradi\\")" "(read-word)" "(delete-all-words \\"ovo\\")" "(read-word)" "(delete-all-words \\"da\\")" "(read-word)" "(delete-all-words \\"bre\\")" "(read-word)" "(delete-all-words \\"aj\\")" "(read-word)" "(delete-all-words \\"lady\\")" "(delete-all-words \\"sir\\")" "(read-word)" "(delete-all-words \\"madam\\")" "(read-word)" "(words-do-all-for-classifier1 \\"Dva jedan\\" 0)" "(words-do-all-for-classifier \\"Dva jedan\\" 0)" "(insert-into-classifier \\"jedan dva\\" 1)" "classifier" "(insert-into-classifier1 \\"jedan dva\\" 1)" "(use 'master.routes.comments)" "(insert-into-classifier1 \\"jedan dva\\" 1)" "(words-do-all-for-classifier1 \\"jedan dva\\" 1)" "(insert-into-classifier \\"jedan dva\\" 1)" "(usd 'master.routes.comments)" "(use 'master.routes.comments)" "(insert-into-classifier \\"jedan dva\\" 1)" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "clas" "classifier" "(get-probability-and-db \\"jedan dva\\")" "classifier" "(insert-into-classifier \\"jedan dva\\" 1)" "classifier" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "classifier" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "(use 'master.models.db)" "(read-all-words)" "(delete-word \\"dva\\")" "(delete-word \\"jedan\\")" "(read-all-words)" "classifier" "(insert-into-classifier \\"jedan dva\\" 1)" "classifier" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "classifier" "(get-probability-and-db \\"jedan dva\\")" "classifier" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "(use 'master.models.db)" "(read-all-words)" "(use 'master.models.db)" "(delete-word \\"jedan\\")" "(delete-word \\"dva\\")" "(use 'master.routes.comments)" "(insert-into \\"jedan dva\\")" "(insert-into \\"jedan dva\\" 1)" "classifier" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "(get-probability-and-db \\"jedan dva\\")" "(use 'master.models.db)" "(read-all-words)" "(words-do-all-for-classifier \\"jedan dva\\" 1)" "classifier" "(words-do-all-for-classifier \\"jedan dva\\" 1)" "(map (get-word-data-from-db) (text-to-list \\"jedan dva\\"))" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "(map (get-word-data-from-db) (text-to-list \\"jedan dva\\"))" "(defn aass (str aass \\"-dod\\"))" "(def aass (str aass \\"-dod\\"))" "(map (aass) (text-to-list \\"jedan dva\\"))" "(defn aass [] (str aass \\"-dod\\"))" "(map (aass) (text-to-list \\"jedan dva\\"))" "(text-to-list \\"jedan dva\\")" "(map aass (text-to-list \\"jedan dva\\"))" "(defn dodajj [] (str aass \\"-dod\\"))" "(map (dodajj) (text-to-list \\"jedan dva\\"))" "(defn dodajj [a] (str a \\"-dod\\"))" "(map (dodajj) (text-to-list \\"jedan dva\\"))" "(map dodaj (text-to-list \\"jedan dva\\"))" "(map dodajj (text-to-list \\"jedan dva\\"))" "(words-do-all-for-classifier \\"jedan dva\\" 1)" "classifier" "(use 'master.models.db)" "(read-all-words)" "(delete-word \\"jedan\\")" "(delete-word \\"dva\\n\\")" "(read-all-words)" "(delete-word \\"dva\\")" "(read-all-words)" "(use 'master.routes.comments)" "(words-do-all-for-classifier \\"jedan dva\\" 1)" "classifier" "(insert-into-classifier \\"jedan dva\\" 1)" "classifier" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "classifier" "(words-do-all \\"jedan dva\\" 0)" "(use 'master.models.db)" "(read-all-words)" "(use 'master.routes.comments)" "classifier" "(use 'master.models.db)" "(read-all-words\\n  )" "(delete-word \\"jedan\\")" "(delete-word \\"dva\\")" "(read-all-words\\n  )" "(use 'master.routes.comments)" "classifier" "(call-method-all \\"jedan dva\\" 1)" "classifier" "(use 'master.models.db)" "(read-all-words\\n  )" "(delete-word \\"dva\\")" "(delete-word \\"jedan\\")" "(read-all-words\\n  )" "(use 'master.routes.comments)" "(call-method \\"jedan dva\\" 1 (insert-into-classifier comment-text is-spam))" "(call-method \\"jedan dva\\" 1 (insert-into-classifier \\"jedan dva\\" 1))" "classifier" "(insert-into \\"jedan dva\\")" "(insert-into \\"jedan dva\\" 1)" "(use 'master.models.db)" "(read-all-words\\n  )" "(delete-word \\"jedan\\")" "(delete-word \\"dva\\")" "(use 'master.routes.comments)" "classifier" "call-method-all" "(call-method-all \\"jedan dva\\" 1)" "clas" "classifier" "(call-method-all \\"jedan dva\\" 1)" "class" "classifier" "(use 'master.models.db)" "(read-all-words\\n  )" "classifier" "(delete-word \\"jedan\\")" "(call-method-all \\"jedan dva\\" 1)" "(read-all-words\\n  )" "(delete-word \\"jedan\\")" "(delete-word \\"dva\\")" "(read-all-words\\n  )" "(call-method-all \\"jedan dva tri\\" 1)" "(read-all-words\\n  )" "(delete-word \\"dva\\")" "(delete-word \\"jedan\\")" "(delete-word \\"tri\\")" "(read-all-words\\n  )" "classifier" "(call-method-all \\"jedan dva\\" 1)" "classifier" "(read-all-words\\n  )" "(call-method-all \\"jedan dva\\" 1)" "(read-all-words\\n  )" "classifier" "(insert-into-classifier \\"jedan dva\\" 1)" "classifier" "(map get-word-data-from-db (text-to-list \\"jedan dva\\"))" "(read-all-words)" "(call-method-all \\"jedan dva\\" 1)" "classifier" "(read-all-words)" "(call-method-all \\"jedan dva\\" 1)" "classifier" "(read-all-words)" "(words-do-all \\"jedan dva tri\\" 0)" "classifier" "(call-method-all \\"jedan dva\\" 1)" "classifier" "(use 'master.models.db)" "(read-all-words)" "(delete-word \\"jedan\\")" "(delete-word \\"dva\\")" "(delete-word \\"tri\\")" "(read-all-words)" "(call-method-all \\"Jedan dva\!\\" 0)" "(use 'master.routes.comments)" "(call-method-all \\"Jedan dva\!\\" 0)" "classifier" "(read-all-words)" "(call-method-all \\"Jedan dva\!\\" 0)" "classifier" "(read-all-words)" "(delete-word \\"dva\\")" "(delete-word \\"jedan\\")" "(read-all-words)" "classifier" "(call-method-all \\"Jedan dva\!\\" 0)" "classifier" "(read-all-words)" "(call-method-all \\"Jedan dva\!\\" 1)" "(read-all-words)" "classifier" "(call-method-all \\"Jedan dva\!\\" 1)" "classifier" "(read-all-words)" "classifier" "(call-method-all \\"Jedan dva\!\\" 1)" "classifier" "(read-all-words)" "(use 'master.repl)" "(start-server)" "(read-all-words)" "(read-comments)" "(read-comments \\"Bad Boys\\")" "(use 'master.models.db)" "(read-all-spam-words)" "(use 'master.models.db)" "(read-all-spam-words)" "(read-all-words)" "(read-all-spam-words)" "(read-all-words)" "(read-all-spam-words)" "(read-all-words)" "(count \\"vule\\")" "(if \\r\\n    (> (count \\"\\") 2) \\"Da\\")" "(if \\r\\n    (> (count \\"Da\\") 2) \\"Da\\")" "(if \\r\\n    (> (count \\"Daa\\") 2) \\"Da\\")" "(use 'master.models.db)" "(read-all-words)" "(delete-word \\"mi\\")" "(read-all-words)" "(read)" "(read-comments)" "(read-comments \\"Bad Boys\\")" "(call-method-all \\"Nile baca komentar\\" 0)" "(read-all-words)" "(insert-into-classifier \\"Nile bacakomentar\\" 0)" "classifier" "(insert-into-classifier \\"Nile bacakomentar\\" 0)" "(insert-into-classifier \\"Nile baca komentar\\" 0)" "classifier" "(map get-word-data-from-db (text-to-list \\"Nile baca komentar\\"))" "clas" "classifier" "(get-probability-and-db \\"Nile baca komentar\\")" "classifier" "(use 'master.models.db)" "(read-all-words)" "(make-word-map \\"nile\\" 40 1 1.0)" "classifier" "(use 'master.spam_helper)" "classifier" "(set-zero classifier \\"nile\\" \:good)" "(set-zero classifier \\"nile\\" \:bad)" "classifier" "(read-all-words)" "(insert-into-classifier \\"Nile baca komentar\\" 0)" "classifier" "(map get-word-data-from-db (text-to-list \\"Nile baca komentar\\"))" "(get-word-data-from-db \\"nile\\")" "(read-all-words)" "classifier" "(insert-into-classifier \\"Nile baca komentar\\" 0)" "classifier" "(map get-word-data-from-db (text-to-list \\"Nile baca komentar\\"))" "classifier" "(insert-or-update \\"nile\\")" "(read-all-words)" "classifier" "(get-probability-and-db \\"Nile baca komentar\\")" "(read-all-words)" "classifier" "(insert-into-classifier \\"Nile baca komentar\\" 0)" "classifier" "(map get-word-data-from-db (text-to-list \\"Nile baca komentar\\"))" "classifier" "(get-probability-and-db \\"Nile baca komentar\\")" "(read-all-words)" "(read-all-spam-words)" "spam-counter" "(check-comment \\"Nije kometar nile baca\\")" "spam-counter" "(check-comment \\"Nije kometar nile baca\\")" "spam-counter" "(read-all-spam-words)" "(check-comment \\"Nije komentar nile baca\\")" "spam-counter" "()" "(checked-data-insert \\"Nile baca komentar ponvo dal je to ok\\" \\"Nile\\" \\"Bad Boys\\")" "(read-comments)" "(read-comments \\"Bad Boys\\")" "(checked-data-insert \\"Nile baca komentar ponvo kupi\\" \\"NileOpet\\" \\"Bad Boys\\")" "(read-comments \\"Bad Boys\\")" "spam-counter" "(checked-data-insert \\"Nile baca komentar ponvo kupi\\" \\"NileOpet\\" \\"Bad Boys\\")" "spam-counter" "(inc spam-counter)" "spam-counter" "(check-word \\"nile\\")" "spam-counter" "(check-comment \\"ovo je moj komentar \\")" "spam-counter" "(checked-data-insert \\"Nile baca komentar ponvo kupi\\" \\"NileOpet\\" \\"Bad Boys\\")" "(checked-data-insert \\"Nile baca komentar ponvo kupi\\" \\"NileOpet001\\" \\"Bad Boys\\")" "(read-comments \\"Bad Boys\\")" "(read-all-spam-words)" "spam-counter" "(read-all-spam-words)" "spam-counter" "(checked-data-insert \\"Moj komentar novi\\" \\"Sale\\" \\"Ed\\")" "(read-comments)" "(read-comments \\"Ed\\")" "(checked-data-insert \\"Moj dodaj nile kupi  komentar novi\\" \\"Sale\\" \\"Ed\\")" "(read-comments \\"Ed\\")" "spam-counter" "(def spam-counter 0)" "(checked-data-insert \\"LALA dodaj nile kupi komentar novi\\" \\"Kill\\" \\"Ed\\")" "(read-comments \\"Ed\\")" "spam-counter" "(read-all-spam-words)" "(checked-data-insert \\"OVO baca dodaj nile kupi komentar novi\\" \\"Kill\\" \\"Ed\\")" "(read-comments \\"Ed\\")" "spam-counter" "(read-all-spam-words)" "spam-counter" "(checked-data-insert \\"nile baca komentar dodaj novo console\\" \\"Cons\\" \\"The Green Mile\\")" "(read-comments \\"The Green Mile\\")" "spam-counter" "(check-comment \\"Baci koemntar nile\\")" "spam-counter" "(check-comment \\"Baci koemntar nile\\")" "spam-counter" "(check-comment \\"Baci koemntar nile\\")" "\=> (check-comment \\"Baci koemntar nile lala sasa\\")" "\\n(check-comment \\"Baci koemntar nile lala sasa\\")" "spam-counter" "(def spam-counter 0\\n  )" "\\n(check-comment \\"Baci koemntar nile lala sasa\\")" "spam-counter" "\\n(read-all-words)" "\\n(read-all-spam-words)" "spam-counter" "(def spam-counter 0)" "(check-comment \\"Ovo je dobro\\")" "(check-comment \\"Ovo je dobro nile komentar dodaj\\")" "spam-counter" "(read-all-spam-words)" "(use 'master.repl)" "(start-server)" "(use 'master.models.db)" "(create-words-table)" "(create-comment-table)"]
eclipse.preferences.version=1
